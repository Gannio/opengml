# object

# event create

http_req_get = -1;
http_req_post = -1;
http_req_req = -1;

# event async_http

if (async_load[? "status"] == 1)
{
    show_debug_message("loading...");
    exit;
}

if (http_req_get == async_load[? "id"])
{
    show_debug_message("Response for GET");
}
else if (http_req_post == async_load[? "id"])
{
    show_debug_message("Response for POST");
}
else if (http_req_req == async_load[? "id"])
{
    show_debug_message("Response for request");
}
else
{
    show_debug_message("Response for unknown request");
}

show_debug_message("In response to " + async_load[? "url"])
if (async_load[? "status"] < 0)
{
    show_debug_message("failed with status " + string(async_load[? "status"]));
}
else
{
    show_debug_message("server says: " + async_load[? "result"])
}

http_req_get = -1;
http_req_post = -1;
http_req_req = -1;

# event step

if (http_req_get < 0 && http_req_post < 0 && http_req_req < 0)
{
    show_debug_message("type 'q' to quit, or GET <url>, or POST <url> <body>, or REQ <method> <url> [header:value*] <body>")
    var str = get_string("");
    
    if (str == "q")
    {
        game_end();
    }
    
    var commands = string_split(str, " ", true);
    if (array_length(commands) == 2 && commands[0] == "GET")
    {
        var url = commands[1];
        show_debug_message("Sending GET request...");
        http_req_get = http_get(url);
    }
    else if (array_length(commands) >= 3 && commands[0] == "POST")
    {
        var body = "";
        for (var i = 2; i < array_length(commands); ++i)
        {
            if (i > 2) body += " ";
            body += commands[i];
        }
        var url = commands[1];
        show_debug_message('Sending POST request "' + body + '"...');
        http_req_post = http_post_string(url, body);
    }
    else if (array_length(commands) >= 3 && commands[0] == "REQ")
    {
        var body = "";
        var method = commands[1];
        var url = commands[2];
        if (array_length(commands) > 3)
        {
            body = commands[array_length(commands) - 1];
        }
        var headermap = -1
        show_debug_message('Sending "' + method + '" request "' + body + '"...');
        for (var i = 3; i < array_length(commands) - 1; ++i)
        {
            if (headermap < 0) headermap = ds_map_create();
            
            var h = string_split(commands[i], ':', true);
            if (array_length(h) == 2)
            {
                headermap[? h[0]] = h[1];
                show_debug_message("header> " + h[0] + ": " + h[1])
            }
        }
        
        http_req_req = http_request(url, method, headermap, body);
        if (headermap >= 0) ds_map_destroy(headermap);
    }
}